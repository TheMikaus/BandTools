name: Build AudioBrowser

# Permissions for release publishing
permissions:
  contents: write

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'AudioBrowserAndAnnotation/**'
      - '.github/workflows/build-audiobrowser.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'AudioBrowserAndAnnotation/**'
      - '.github/workflows/build-audiobrowser.yml'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release after build'
        required: false
        default: false
        type: boolean

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            exe_dir: AudioFolderPlayer
            executable_name: AudioFolderPlayer
            archive_ext: tar.gz
          - os: windows-latest
            platform: windows
            exe_dir: AudioFolderPlayer
            executable_name: AudioFolderPlayer.exe
            archive_ext: zip
          - os: macos-latest
            platform: macos
            exe_dir: AudioFolderPlayer
            executable_name: AudioFolderPlayer
            archive_ext: tar.gz

    runs-on: ${{ matrix.os }}

    # Force bash so POSIX syntax works on Windows too
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version calculation

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev \
          libegl1 \
          libgl1-mesa-dri \
          libglib2.0-0 \
          libxkbcommon0 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xfixes0 \
          libxcb-xinerama0 \
          libxcb-util1 \
          libxcb-xkb1 \
          libfontconfig1 \
          libxcb-cursor0 \
          libpulse0 \
          libpcsclite1

    - name: Get version info
      id: version
      working-directory: AudioBrowserAndAnnotation
      run: |
        VERSION=$(python -c "import version; print(version.VERSION_STRING)")
        VERSION_INFO=$(python -c "import version; print(version.VERSION_INFO)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_info=$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Version Info: $VERSION_INFO"

    - name: Install Python dependencies
      working-directory: AudioBrowserAndAnnotation
      run: |
        python -m pip install --upgrade pip
        # Install your app deps here; PyInstaller and PyQt6 at minimum
        python -m pip install -r requirements.txt || true
        python -m pip install PyInstaller PyQt6

    - name: Generate application icon
      working-directory: AudioBrowserAndAnnotation
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python make_icon.py || echo "Icon generation skipped/failed; continuing"

    - name: Clean previous build
      working-directory: AudioBrowserAndAnnotation
      run: |
        rm -rf build dist

    - name: Build with PyInstaller (onedir)
      working-directory: AudioBrowserAndAnnotation
      run: |
        # Ensure spec targets an onedir build named AudioFolderPlayer with correct entry
        # If you prefer, you can force it here:
        # python -m PyInstaller --name AudioFolderPlayer --noconfirm --onedir path/to/your_entry.py
        python -m PyInstaller audio_browser.spec
        echo "Build completed!"
        echo "Dist contents:"
        ls -la dist || true
        ls -la "dist/${{ matrix.exe_dir }}" || true

        if [ ! -f "dist/${{ matrix.exe_dir }}/${{ matrix.executable_name }}" ]; then
          echo "❌ Expected executable not found at dist/${{ matrix.exe_dir }}/${{ matrix.executable_name }}"
          exit 1
        fi

    - name: Verify executable (Linux/macOS)
      if: matrix.platform != 'windows'
      working-directory: AudioBrowserAndAnnotation
      run: |
        chmod +x "dist/${{ matrix.exe_dir }}/${{ matrix.executable_name }}"
        file "dist/${{ matrix.exe_dir }}/${{ matrix.executable_name }}" || true
        echo "Executable permissions set and verified"

    - name: Create artifact name
      id: artifact
      run: |
        ARTIFACT_NAME="AudioFolderPlayer-${{ steps.version.outputs.version }}-${{ matrix.platform }}"
        echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "Artifact name: $ARTIFACT_NAME"

    - name: Upload build artifact (entire app folder)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact.outputs.name }}
        path: AudioBrowserAndAnnotation/dist/${{ matrix.exe_dir }}/
        retention-days: 30

    - name: Create release archive
      # Create a platform-specific archive only on release builds or main pushes
      if: github.event.inputs.create_release == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      working-directory: AudioBrowserAndAnnotation
      run: |
        mkdir -p release
        if [ "${{ matrix.archive_ext }}" = "zip" ]; then
          # Windows - zip (recursive, keep folder structure)
          cd dist
          zip -r "../release/AudioFolderPlayer-${{ steps.version.outputs.version }}-${{ matrix.platform }}.zip" "${{ matrix.exe_dir }}"
          cd ..
        else
          # Linux/macOS - tar.gz
          tar -czf "release/AudioFolderPlayer-${{ steps.version.outputs.version }}-${{ matrix.platform }}.tar.gz" -C dist "${{ matrix.exe_dir }}"
        fi
        echo "Release archive created"
        ls -la release/

    - name: Upload release archive
      if: github.event.inputs.create_release == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.artifact.outputs.name }}
        path: AudioBrowserAndAnnotation/release/*
        retention-days: 90

  create-release:
    if: github.event.inputs.create_release == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    needs: build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Get version info
      id: version
      working-directory: AudioBrowserAndAnnotation
      run: |
        VERSION=$(python -c "import version; print(version.VERSION_STRING)")
        VERSION_INFO=$(python -c "import version; print(version.VERSION_INFO)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_info=$VERSION_INFO" >> $GITHUB_OUTPUT

    - name: Download all release archives
      uses: actions/download-artifact@v4
      with:
        pattern: release-*
        path: release-artifacts
        merge-multiple: true

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find release-artifacts -type f -ls

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: audiobrowser-v${{ steps.version.outputs.version }}
        name: AudioBrowser v${{ steps.version.outputs.version }}
        body: |
          # AudioBrowser v${{ steps.version.outputs.version }}

          ${{ steps.version.outputs.version_info }}

          ## Downloads

          Choose the appropriate download for your operating system:

          - **Windows**: `AudioFolderPlayer-${{ steps.version.outputs.version }}-windows.zip`
          - **Linux**: `AudioFolderPlayer-${{ steps.version.outputs.version }}-linux.tar.gz`
          - **macOS**: `AudioFolderPlayer-${{ steps.version.outputs.version }}-macos.tar.gz`

          ## Installation

          1. Download the appropriate file for your operating system
          2. Extract the archive
          3. Run the `AudioFolderPlayer` executable (inside the extracted folder)

          ## Changes

          This release includes the latest changes from the main branch. See the CHANGELOG for details.

          ---
          Built automatically by GitHub Actions from commit ${{ github.sha }}
        draft: false
        prerelease: false
        files: |
          release-artifacts/AudioFolderPlayer-${{ steps.version.outputs.version }}-windows.zip
          release-artifacts/AudioFolderPlayer-${{ steps.version.outputs.version }}-linux.tar.gz
          release-artifacts/AudioFolderPlayer-${{ steps.version.outputs.version }}-macos.tar.gz
